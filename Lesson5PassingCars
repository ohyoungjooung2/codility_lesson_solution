def solution(a)
  #https://codility.com/programmers/lessons/5-prefix_sums/passing_cars/
  # write your code in Ruby 2.2
  #Find 0's index num
  zero_index=[]
  a.each_index { |i| if a[i]==0; zero_index << i; end }
  #p zero_index
  #From zero index's next until last; sum ones
  #Let's sum

  sum=0
  zero_index.each_with_index { |j,i| sum+=(a.size-1-j)-(zero_index.size-(i+1)) }
   
   if (sum > 1000000000)
     return -1
   else
     sum
   end
end

#Python3 slow solution(50%-100% correctness)
def solution(A):
    # write your code in Python 3.6
    n=len(A)
    c=0
    for i in range(n):
        for j in range((i+1),n):
            if (A[i],A[j])==(0,1):
                c+=1
    return c

#Yet another Python3 slow solution(70%-100% correctness)

def solution(A):
    zero_dic={}
    c=0
    for i in range(len(A)):
         if A[i] == 0:
             zero_dic[c]=i
             c+=1
    sum=0
    for key,items in zero_dic.items():
        #print(key,items)
        sum+=(len(A)-1-items)-(len(zero_dic)-(int(key)+1))
     
    return sum
 
#More longer but 70%(100% correctness and 40% performance) 
 def sol(A):
    zero_index=[]
    for i in range(len(A)):
         if A[i] == 0:
             zero_index.append(i)
    zero_dic={}
    for i in range(len(zero_index)):
        zero_dic[str(i)]=zero_index[i]
    #return(zero_dic)
    sum=0
    for key,items in zero_dic.items():
        print(key,items)
        sum+=(len(A)-1-items)-(len(zero_index)-(int(key)+1))
        
    return sum

 
 
